<?php

/**
 * @defgroup mainlab_tripal Library
 * @{
 * Provides functions for display and management of data in custom tables
 * @}
 * @ingroup tripal_modules
 */

require_once "includes/simple_seq_extract.inc";
require_once "includes/stock_listing.page.inc";

require_once 'theme/mainlab_tripal.theme.inc';

/**
 *
 * @ingroup tripal_feature
 */
function mainlab_tripal_init() {
  drupal_add_css(drupal_get_path('module', 'mainlab_tripal') . '/theme/mainlab/css/mainlab_tripal.css');
}

/**
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_menu() {
  $items = array();
  
  // Mainlab setting groups
  $items['admin/mainlab'] = array(
    'title' => 'Mainlab',
    'description' => t("Manage the behavior or Mainlab modules."),
    'weight' => -1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  
  $items['admin/mainlab/mainlab_tripal'] = array(
    'title' => 'Mainlab Tripal',
    'description' => ('Settings for the mainlab tripal custom displays.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mainlab_tripal_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/mainlab_tripal.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // the custom sequence retrieval form
  $items['retrieve/sequences'] = array(
    'title' => 'Sequence Retrieval',
    'description' => 'Download a file of sequences',
    'page callback' => 'mainlab_tripal_seq_extract_page',
    'access arguments' => array('access chado_feature content'),
    'type' => MENU_CALLBACK,
  );
  

  // The polymorphism page
  $items['polymorphism/%'] = array(
      'title' => 'Polymorphism',
      'page callback' => 'mainlab_show_polymorphism',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'file' => 'includes/polymorphism.page.inc',
      'type' => MENU_CALLBACK
  );
  // The allele page
  $items['allele/%/%/%'] = array(
      'title' => 'Allele',
      'page callback' => 'mainlab_show_allele',
      'page arguments' => array(1,2,3),
      'access arguments' => array('access content'),
      'file' => 'includes/allele.page.inc',
      'type' => MENU_CALLBACK
  );
  
  // The sequence listing page
  $items['feature_listing/%/%/%'] = array(
      'title' => 'Sequences',
      'page callback' => 'mainlab_feature_listing',
      'page arguments' => array(1,2,3),
      'access arguments' => array('access content'),
      'file' => 'includes/feature_listing.page.inc',
      'type' => MENU_CALLBACK
  );
  // Switching page for the stock listing
  $items['stock_listing_page/%/%'] = array(
      'page callback' => 'mainlab_stock_listing_switch_page',
      'page arguments' => array(1,2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
  );
  
  // The gene class browser
  $items['gene_class_listing'] = array(
      'page callback' => 'mainlab_gene_class_listing_page',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/gene_class_listing.page.inc',
  );
  
  // The gene class page
  $items['gene_class'] = array(
      'page callback' => 'mainlab_gene_class_page',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/gene_class.page.inc',
  );
  
  // Replicate Tripal Pub Search URLs
  $items['search/publications' ]= array(
      'title' => 'Publication Search',
      'description' => ('Search for publications'),
      'page callback' => 'tripal_pub_search_page',
      'access arguments' => array('access chado_pub content'),
      'type' => MENU_CALLBACK
  );  
  $items['search/publications/criteria/%/%'] = array(
      'page callback' => 'tripal_pub_search_page_update_criteria',
      'page arguments' => array(5, 6),
      'access arguments' => array('access chado_pub content'),
      'type ' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 *
 * @ingroup mainlab_qtl
 */
function mainlab_tripal_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    // Get the chado type
    $type = preg_replace('/^chado_/', '', $node->type);
    
    // Get available templates
    $templates = mainlab_tripal_get_templates (TRUE);
    $enabled_themes = variable_get('mainlab_tripal_enabled_themes', array());
    
    // Load appropriate templates for the node. Scan through all enabled mainlab templates.
    foreach ($templates AS $key => $template) {

      //The key is in format: mainlab_tripal--<sub_folder>--mainlab_<chado_type>_<*>
      if (preg_match('/^mainlab_tripal--.*?--mainlab_' . $type . '_/', $key) && $enabled_themes['templates--' . $type]) {
        
        $template = $templates[$key];
        $template_name = $template->name;
        
        $toc = '';
        
        // For chado_feature we want to match feature type (i.e. gene/mRNA/contig/QTL, etc.)
        if ($type == 'feature') {
          $featuretype = $node->feature->type_id->name;
          // Use generic feature Contact template
          if ($template_name == 'mainlab_feature_contact') {
            $toc = 'contact';
          }
          // Use generic feature References template
          else if ($template_name == 'mainlab_feature_references') {
            $toc = 'references';
          }
          // Use generic feature Publications template
          else if ($template_name == 'mainlab_feature_publications') {
            $toc = 'publications';
          }
          // Use generic feature Alignments template
          else if ($template_name == 'mainlab_feature_alignments') {
            $toc = 'alignments';
          }
          else if ($template_name == 'mainlab_feature_libraries') {
            $toc = 'libraries';
          }
          else if ($template_name == 'mainlab_feature_stocks') {
            $toc = 'germplasm';
          }
          else if ($template_name == 'mainlab_feature_relationships') {
            $toc = 'relationships';
          }
          else if ($template_name == 'mainlab_feature_analyses') {
            $toc = 'analyses';
          }
          else if ($template_name == 'mainlab_feature_unigenes') {
            $toc = 'unigenes';
          }
          // Use the GenericGene template when applicable
          else if (preg_match('/mainlab_feature_generic_gene_/', $template_name)) {
            $feature = $node->feature;
            $feature = chado_expand_var($feature, 'table', 'featureprop', array('return_array' => 1));
            $is_generic = FALSE;
            $props = is_array($feature->featureprop) ? $feature->featureprop : array($feature->featureprop);
            foreach ($props AS $prop) {
              if (is_object($prop) &&$prop->type_id->name == 'source' && $prop->value == 'tripal_genbank_parser_generic_gene') {
                $is_generic = TRUE;
              }
            }
            if($is_generic) {
              $featuretype = 'generic_gene';
              $toc = preg_replace('/mainlab_'. $type . '_' . $featuretype . '_/', '', $template_name);
            }
            else {
              continue;
            }
          }
          // Use template separated by feature_type
          else if (preg_match('/mainlab_feature_' . $featuretype . '_/', $template_name)) {
            $toc = preg_replace('/mainlab_'. $type . '_' . $featuretype . '_/', '', $template_name);
          }
          // Skip the feature template if it does not match the naming scheme
          else {
            continue;
          }
        }
        // For all other chad_* type
        else {
          $toc = preg_replace('/mainlab_'. $type . '_/', '', $template_name);
        }
        
        // Debug: uncomment the following line to show the template used
        //dpm("$template->name (in '$template->folder' folder)"); 
        
        // Initialize the content array
        $node->content[$template_name] = array();
        
        // Rewrite TOC for the base        
        if ($toc == 'base') {
          $node->content[$template_name]['#weight'] = -99;
          $toc = 'overview';
          switch ($type) {
            case 'organism':
              //$toc = 'species_overview';
              break;
            case 'feature':
              $featuretype = $node->feature->type_id->name;
              switch ($featuretype) {
                case 'genetic_marker':
                  $toc = 'marker_overview';
                  break;
                case 'heritable_phenotypic_marker':
                  $toc = 'MTL_overview';
                  break;
                case 'QTL':
                  $toc = 'QTL_overview';
                  break;
                case 'region':
                  $toc = 'overview';
                  break;
                default:
                  $toc = $featuretype . '_overview';
              }
              break;
            case 'stock':
              $toc = 'germplasm_overview';
              break;
            case 'featuremap':
              $toc = 'map_overview';
              break;
            case 'eimage':
              $toc = 'image_overview';
              break;
            case 'nd_geolocation':
              $toc = 'environment_overview';
              break;
            case 'pub':
              $toc = 'publication_overview';
              break;
            case 'project':
              $toc = 'project_overview';
              break;
            case 'contact':
              $toc = 'contact_overview';
              break;
          }
        }
        
        // Attach theme to the content
        $node->content[$template_name]['#markup'] = theme($template_name,  array('node' => $node));
        $node->content[$template_name]['#tripal_toc_id']    = $toc;
        $node->content[$template_name]['#tripal_toc_title'] = ucwords(str_replace('_', ' ',$toc));
      }
    }
  }
  return;
}

/**
 * Implementation of hook_nodeapi().
 * 
 * @ingroup mainlab_qtl
 */
function mainlab_tripal_node_view_alter(&$build) {
  // Hide default templates in this function
  
  $node = $build['#node'];
  $enabled_themes = variable_get('mainlab_tripal_enabled_themes', array());
  
  // Organism
  if (property_exists($node, 'organism') && key_exists('templates--organism', $enabled_themes) && $enabled_themes['templates--organism']) {
    unset($build['tripal_organism_base']);
    unset($build['tripal_organism_stocks']);
    unset($build['tripal_organism_properties']);
    unset($build['tripal_organism_unigenes']);
    unset($build['tripal_organism_libraries']);
  }
  
  // Analysis
  if (property_exists($node, 'analysis')) {
    $analysis = $build['#node']->analysis;
    $analysis = chado_expand_var($analysis, 'table', 'analysisprop', array('return_array' => TRUE));
    $is_genome = FALSE;
    if (property_exists($analysis, 'analysisprop')) {
      if (is_array($analysis->analysisprop)) {
        foreach ($analysis->analysisprop AS $prop) {
          if ($prop->type_id->name == 'Analysis Type') {
            $is_genome = $prop->value == 'whole_genome' ? TRUE : FALSE;
          }
        }
      }
    }
    // Genome
    if ($is_genome) {
      $build['tripal_analysis_base']['#tripal_toc_title'] = 'Genome Overview';
    }
  }
  
  //Feature
  if (property_exists($node, 'feature') && key_exists('templates--feature', $enabled_themes) && $enabled_themes['templates--feature']) {
    unset($build['tripal_feature_references']);
    unset($build['tripal_feature_contact']);
    unset($build['tripal_feature_alignments']);
    unset($build['tripal_feature_publications']);
    unset($build['tripal_feature_libraries']);
    unset($build['tripal_feature_relationships']);
    unset($build['tripal_feature_analyses']);
    unset($build['tripal_feature_unigenes']);
    switch ($node->feature->type_id->name) {
      // Use mainlab templates if it's enabled
      case 'genetic_marker':
        if ($enabled_themes['templates--genetic_marker']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_properties']);
          unset($build['tripal_feature_genotypes']);
          unset($build['tripal_feature_phenotypes']);
          unset($build['tripal_feature_nd_genotypes']);
          unset($build['tripal_feature_nd_phenotypes']);
          unset($build['tripal_feature_seqence']);
          unset($build['tripal_feature_synonyms']);
        }
        break;
        case 'sequence_feature':
        if ($enabled_themes['templates--genetic_marker']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_seqence']);
        }
        break;
      case 'QTL':
        if ($enabled_themes['templates--QTL']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_properties']);
          unset($build['tripal_feature_terms']);
        }
        break;
      case 'heritable_phenotypic_marker':
        if ($enabled_themes['templates--heritable_phenotypic_marker']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_properties']);
          unset($build['tripal_feature_terms']);
        }
        break;
      case 'haplotype_block':
        if ($enabled_themes['templates--haplotype_block']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_genotypes']);
          unset($build['tripal_feature_phenotypes']);
          unset($build['tripal_feature_nd_genotypes']);
          unset($build['tripal_feature_nd_phenotypes']);
          unset($build['tripal_feature_relationships']);
        }
        break;
      // The following features use the default Tripal templates but we want to change the title
      case 'mRNA':
        $build['tripal_feature_base']['#tripal_toc_title'] = 'Transcript Overview';
        break;
      case 'gene':
        $is_generic = FALSE;
        $feature = $node->feature;
        $props = array();
        if (property_exists($feature, 'featureprop')) {
          $props = is_array($feature->featureprop) ? $feature->featureprop : array($feature->featureprop);
        }
        foreach ($props AS $prop) {
          if (is_object($prop) && $prop->type_id->name == 'source' && $prop->value == 'tripal_genbank_parser_generic_gene') {
            $is_generic = TRUE;
          }
        }
        if($is_generic) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_properties']);
          unset($build['tripal_feature_relationships']);
          unset($build['tripal_feature_synonyms']);
        }
        $build['tripal_feature_base']['#tripal_toc_title'] = 'Gene Overview';
        break;
      case 'EST':
        $build['tripal_feature_base']['#tripal_toc_title'] = 'EST Overview';
        break;
      case 'contig':
        $build['tripal_feature_base']['#tripal_toc_title'] = 'Contig Overview';
        break;
      case 'region':
        unset($build['tripal_feature_base']);
        unset($build['tripal_feature_properties']);
        unset($build['mainlab_feature_alignments']);
        unset($build['mainlab_feature_relationships']);
        break;
    }
  }
  
  // Stock
  if (property_exists($node, 'stock') && key_exists('templates--stock', $enabled_themes) && $enabled_themes['templates--stock']) {
    unset($build['tripal_stock_base']);
    unset($build['tripal_stock_properties']);
    unset($build['tripal_stock_relationships']);
    unset($build['tripal_stock_references']);
    unset($build['tripal_stock_publications']);
    unset($build['tripal_stock_synonyms']);
    unset($build['tripal_stock_collections']);
    unset($build['tripal_stock_nd_genotypes']);
    unset($build['tripal_stock_nd_phenotypes']);
  }
  
  // Map
  if (property_exists($node, 'featuremap') && key_exists('templates--featuremap', $enabled_themes) && $enabled_themes['templates--featuremap']) {
    unset($build['tripal_featuremap_base']);
    unset($build['tripal_featuremap_properties']);
    unset($build['tripal_featuremap_featurepos']);
    unset($build['tripal_featuremap_publication']);
  }
  
  // Environment
  if (property_exists($node, 'nd_geolocation') && key_exists('templates--nd_geolocation', $enabled_themes) && $enabled_themes['templates--nd_geolocation']) {
    unset($build['tripal_nd_geolocation_base']);
  }
  
  // Eimage
  if (property_exists($node, 'eimage') && key_exists('templates--eimage', $enabled_themes) && $enabled_themes['templates--eimage']) {
    unset($build['tripal_eimage_base']);
  }
  
  // Project
  if (property_exists($node, 'project') && key_exists('templates--project', $enabled_themes) && $enabled_themes['templates--project']) {
    unset($build['tripal_project_base']);
    unset($build['tripal_project_contact']);
    unset($build['tripal_project_properties']);
    unset($build['tripal_project_publications']);
    unset($build['tripal_project_relationships']);
  }
  // Library
  if (property_exists($node, 'library') && key_exists('templates--library', $enabled_themes) && $enabled_themes['templates--library']) {
    unset($build['tripal_library_features']);
    unset($build['tripal_library_publications']);
  }
  // Contact
  if (property_exists($node, 'contact') && key_exists('templates--contact', $enabled_themes) && $enabled_themes['templates--contact']) {
    unset($build['tripal_contact_base']);
    unset($build['tripal_contact_properties']);
  }
  // Pub
  if (property_exists($node, 'pub') && key_exists('templates--pub', $enabled_themes) && $enabled_themes['templates--pub']) {
    unset($build['tripal_pub_authors']);
    unset($build['tripal_pub_featuremaps']);
    unset($build['tripal_pub_features']);
    unset($build['tripal_pub_libraries']);
    unset($build['tripal_pub_projects']);
    unset($build['tripal_pub_stocks']);
    unset($build['tripal_pub_relationships']);
  }
}


/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'mainlab_tripal') . '/theme/';
  $core_path = drupal_get_path('module', 'tripal_core');
  
  // Load enabled templates
  $themes = array();
  $templates = mainlab_tripal_get_templates (TRUE);
  foreach ($templates AS $key => $file) {
      $themes[$file->name] = array(
        'variables' => array('node' => NULL),
        'template' => $file->name,
        'path' => $path . $file->folder,
      );
  }
  
  // nd_geolocation requires an extra template
  $themes['node__chado_nd_geolocation'] = array(
    'template' => 'node--chado-generic',
    'render element' => 'node',
    'base hook' => 'node',
    'path' => "$core_path/theme/templates",
  );
  return $themes;
}

/**
 * Return the site name
 * @return string:
 *  'gdr' for Rosaceae Genomic Database
 *  'cottongen' for CottonGen
 */
function mainlab_tripal_get_site () {
  global $base_url;
  if (preg_match('/rosaceae\.org/', $base_url) || preg_match('/rosaceae\.org/', $_SERVER['SERVER_NAME'])) {
    return 'gdr';
  } else if (preg_match('/cottongen\.org/', $base_url) || preg_match('/cottongen\.org/', $_SERVER['SERVER_NAME'])) {
    return 'cottongen';
  } else {
    return 'unknown';
  }
}
/**
 * Hook to Tripal Pub form to add a tutorial link
 * @param unknown $form
 * @param unknown $form_state
 */
function mainlab_tripal_form_tripal_pub_search_form_alter (&$form, &$form_state) {
  drupal_set_title('Search Publications');
  $tutorial = db_query("select pid from url_alias where alias = 'tutorial/publication_search'")->fetchField();
  if ($tutorial) {
    $val = $form['instructions']['#markup'];
    $append = '<b> | ' . l('Short video tutorial', 'https://www.youtube.com/watch?v=YxeTl2Lws74', array('attributes' => array('target' => '_blank'))) . ' | ' . l('Text tutorial', 'tutorial/publication_search') . ' | ' . 
       l('Email us with problems and suggestions', 'contact') . '</b>';
    $form['instructions']['#markup'] = $val . $append;
  }
}

/**
 * Get a list of PHP templates stored in the theme directory
 * 
 * @return stdClass[]
 * return an array of objects which has two properties: 'file' and 'folder'. The 'file' is the PHP 
 * file name without .tpl.php while the 'folder' is the path between 'theme' and the PHP file 
 * name without leading or trailing slash /. 
 * The array is keyed in the format of 'mainlab_tripal--$folder--$file->name'
 */
function mainlab_tripal_get_templates($enabled_only = FALSE) {
  // Get available templates
  $enabled_templates = variable_get('mainlab_tripal_enabled_templates', array());
  
  $theme = array ();
  $theme_path = drupal_get_path('module', 'mainlab_tripal') . '/theme';
  $templates = file_scan_directory($theme_path, '/\.tpl\.php/', array('recurse' => TRUE));
  
  foreach ($templates AS $path => $template) {
    $file = new stdClass();
    $file->name = str_replace('.tpl.php', '' , $template->filename);
    $folder = trim(str_replace(array($theme_path, $template->filename), array('', ''), $path), '/');
    if ($folder) {
      $file->folder = $folder;
      $key = 'mainlab_tripal--' . $folder.'--'. $file->name;
    }
    // Get only enabled tempaltes
    if ($enabled_only) {
      if (key_exists($key, $enabled_templates)) {
        $theme[$key] = $file;
      }
    }
    // Get all templates
    else {
      $theme[$key] = $file;
    }
  }
  // Make sure the base template are loaded before other templates so all required variables are populated
  $base_templates = array();
  $other_templates = array();
  foreach ($theme AS $k => $v) {
    if (preg_match('/_base$/', $k)) {
      $base_templates [$k] = $v;
    }
    else {
      $other_templates[$k] = $v;
    }
  }
  $theme = array_merge($base_templates, $other_templates);
  return $theme;
}

/**
 * Get a list of PHP preprocessors stored in the theme directory
 *
 */
function mainlab_tripal_get_preprocessors() {
  $theme = array ();
  $prep_path = drupal_get_path('module', 'mainlab_tripal') . '/theme/preprocessors';
  $preps = file_scan_directory($prep_path, '/\.prep\.inc/', array('recurse' => TRUE));
  return $preps;
}

// This is a function to convert a database resultset into an object array
function mainlab_tripal_dbresult_to_array($dbresult) {
  $arr = array();
  while ($obj = $dbresult->fetchObject()) {
    array_push($arr, $obj);
  }
  return $arr;
}
// The function will aggreate the content of a String array by using the specified separator
function mainlab_tripal_stringarray_agg($arr, $separator) {
  $text = "";
  for ($i = 0; $i < count($arr); $i ++) {
    $text .= $arr[$i];
    if ($i != count($arr) - 1) {
      $text .= $separator;
    }
  }
  return $text;
}

// Link to Tripal v2 node. If node is not available, link to Tripal v3 entity
function mainlab_tripal_link_record ($base_table, $record_id) {
  $link = NULL;
  // tripal v2 link (node)
  $nid = chado_get_nid_from_id ($base_table, $record_id);
  if ($nid) {
    $link = "/node/$nid";
  }
  // tripal v3 link (entity)
  if (function_exists('chado_get_record_entity_by_table') && $record_id) {
      $entity_id = chado_get_record_entity_by_table ($base_table, $record_id);
    if ($entity_id) {
      $link = "/bio_data/$entity_id";
    }
  }
  return $link;
}

function mainlab_tripal_sync_environment () {
  $sql = "
    SELECT * FROM {nd_geolocation} 
    WHERE nd_geolocation_id NOT IN (SELECT nd_geolocation_id FROM chado_nd_geolocation)
    ORDER BY nd_geolocation_id";
  $results =chado_query($sql);
  $counter_synced = 0;
  foreach ($results as $record) {
      // Create generic new node.
      $new_node = new stdClass();
      $new_node->type = 'chado_nd_geolocation';
      $new_node->uid = 0;
      $new_node->title = $record->description;
      $new_node->nd_geolocation_id = $record->nd_geolocation_id;
      $new_node->nd_geolocation = $record;
      $new_node->language = LANGUAGE_NONE;
      
      // Validate and Save New Node
      $form = array();
      $form_state = array();
      node_validate($new_node, $form, $form_state);
      
      if (!form_get_errors()) {
        $node = node_submit($new_node);
        node_save($node);
        if ($node->nid && $node->vid) {
          $sql = "INSERT INTO chado_nd_geolocation (nid, vid, nd_geolocation_id) VALUES (:nid, :vid, :nd_geolocation_id)";
          db_query($sql, array(':nid' => $node->nid, ':vid' => $node->vid, ':nd_geolocation_id' => $record->nd_geolocation_id));
          $counter_synced ++;
        }
      }
      else {
        throw new Exception(t("Failed to insert $base_table: %title", array('%title' => $new_node->title)));
      }
  }
  print "Synced $counter_synced records.\n";
}

function mainlab_tripal_feature_get_synonyms ($feature_id) {
  $sql = 
    "SELECT 
       S.synonym_id, 
       S.name, 
       S.type_id,
       (SELECT name FROM {cvterm} WHERE cvterm_id = S.type_id) AS type,
       L.library_id,
       L.name AS library
     FROM {feature} F
     INNER JOIN {feature_synonym} FS ON F.feature_id = FS.feature_id
     INNER JOIN {synonym} S ON S.synonym_id = FS.synonym_id
     INNER JOIN {library_synonym} LS ON LS.synonym_id = S.synonym_id
     INNER JOIN {library} L ON L.library_id = LS.library_id
     WHERE F.feature_id = :feature_id";
  $results = chado_query($sql, array(':feature_id' => $feature_id));
  $synonyms = array();
  while ($s = $results->fetchObject()) {
    $values = array(
      $s->library_id => array(
        'library' => $s->library,
        'synonym' => $s->name
      )
    );
    if (isset($synonyms[$s->type_id]['values'])) {
      $values += $synonyms[$s->type_id]['values'];
    }
    $synonyms[$s->type_id]['type'] = $s->type;
    $synonyms[$s->type_id]['values'] = $values;
  }
  return $synonyms;
}